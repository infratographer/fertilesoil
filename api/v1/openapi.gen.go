// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY33OjNhD+VzRqHzE4uTfe0iTteOYu7aTtU5rprGEB3YBEpOWcjIf/vSOBDRhc29dc",
	"mszlzeD98X3aT7sSax6polQSJRkernkJGgok1O5pJSj7O8YcCWP7LCQP+UOF+ol7XEKBPBzaeNxEGRZg",
	"jWNMoMqJhwnkBj1OT6W1XyqVI0he1/XG2uW61AiEV0JjREo/3eJDhYbsP5DnvyY8vFvzHzUmPOQ/BB3o",
	"oA0R7Hp+QgJee//udIOrrR+v72uPd49HZx4G8da81KpETQIdscgRiy8cl0TpAoiHPAbCGYkC+XZlDGkh",
	"U157vF3OU1yEK9DwtccfZ6matS+3GBdX1qEEjdIlUCUJJSHnIekKvVOCVGV8Grfa4xofKqGtoO4saq+3",
	"QP2A91tftfyMEe2U52ekKHsGdQxrFferf1S8EaUuxAEGH8WzyHuaQPsoCAtzojDat6A17Gdn4x/g1wca",
	"7uL8gtoIJcfQdhNuDMfJPH6ttdLj2JGKcaBHIenDeadFIQlT1DZCgcZAiodhuJid/RSaQRsYgSqQIIZm",
	"KYaue4rxaeNQb1rtVBUVlGJmwaUoZ/hIGmYEqcu4FDK2ZmFHpN6l5QKPyVgzIRPVrKYkiJxS246/kIkG",
	"UqmGMkPNLirKlDZ28+qchzwjKsMgSAVl1dKPVBGIgUPT4Eykhes7POR/aMQCJBOGAStAQoqaJUqz7V5i",
	"pBGNzz2eiwilwR6cixKiDNm5Px9AMGEQrFYrH9zfvtJp0Pqa4OPi8vrm9+vZuT/3MypyJ3tBOXZguNdp",
	"lM/9uX9mjVSJEkrBQ/7BP3MJS6DMLXfQ2xrBWsR1MwNtI29+9RlfufeWbkcRZMwgz5lKmCDDokzksUZp",
	"SVshgXVdxFvnTmveYGrf7eZaXNmQvaVUrIXlNQPdUujmuWvJnUaakdBN9aMbSX1vw5hS2RW3nufz+UZP",
	"7eCBssxF5IgFn03TDbpMR3VD10SdXoekIUkwIoxZrypsA6dRYHs6eSZETS+aQFJJfCwbLNjZpEhjVdwi",
	"VVoOVbEEgzFTkgEzQqY5ssXVWBK/IP0XPWiX+BvrYc9RrMMaDI6SL6Of5hgxUbZufV6RakplJmTTnJyt",
	"bCSumKmWsw58Kr6gZJRZ2diy21/Nya9TwEhNO0fx4wQ1FdlqqzndWfkOgAn5Eu3HnUB+UvHTs1VszzVl",
	"ooQ3uJpaiRG9eqTzs+9b57U3HqbBZhzaTAeaZy4MWUU6l8EAsGcKaPdER3yqodq5crlJ+bUNdTvDbeLv",
	"sbvum86vcihPyq7paOYE1e30wNNl91ub8qtV12J+F90bF12wriSJvP424mMu+Om6/NO6vRFxHgRlSJUt",
	"MiHTLTigaWxVy/1977yWvaOVOqk7W/v+9vD/kpNiv3VxRyp/0YptP96dULrR57u3UcrjrjaD4u27ttjK",
	"9a8u//8lYAj7/SZwwg6v638CAAD//+mYkIShGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
