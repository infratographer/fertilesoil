// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwXLbNhD9Fcy2R4qUnRtvru12NJO4Hbc9pT5A5IpEhgQQYBnZo+G/dwBSIinSsZg6",
	"bdz4JlHY3fd2Hx4g7iBRpVYSJVmId2CTHEvuP14a5IRXwmBCyjzc4scKLblfeFH8uoH4/Q5+NLiBGH6I",
	"uixRmyI6jnyHxKEOPh90g9tDHNR3dQDd15MrD5MEO9BGaTQk0BNLPLH0wnPZKFNyghhSTrggUSIEQA8a",
	"IQZLRsgM6gBSLHBmiEjd2uHjAO4XmVq0Dw8YV1cuQHOD0hdQmoSSvICYTIXBnCSVTudxqwMw+LESBlOI",
	"3zvUQa9B/YR3h1i1/oAJHY3nZ6QkfwZ1DGeV9qd/Ur4RpS7FEwzeimeR9zSB9qsgLO1MYbRPuTH8cXYu",
	"/xP8+kDjY5yf0Fih5BjaccH9wnGxAK6NUWacO1EpDvQoJL0577QoJGGGxmUo0Vqe4dMwfM5u/RSagQ2M",
	"QJVIPOVNK4ahjwzj3T6gDkDyEqenqLgWCwcuQ7nAezJ8QTzzFddCpm5Z3BGpj2n5xGMybpmQG9V0UxJP",
	"vFIbGLCSG8NJZYbrHA27qChXxrrNawqIISfScRRlgvJqHSaqjMQgoDE4mxjhfQdi+MMgllwyYRlnJZc8",
	"Q8M2yrDDXmJkEG0IARQiQWmxB+dC8yRHdh4uBxBsHEXb7Tbk/udQmSxqY230dnV5ffP79eI8XIY5lYWX",
	"vaACOzAQdBqFZbgMz9wipVFyLSCGN+GZL6g55b7dUW9rRDuR1u5hhr5xQ7q3SJWRjmvHb80tpkxJxpkV",
	"MiuQra4cXSch7uJWKcTwC1InMW/hvERCY719DKusrpja9DuomPGFwc0WYo8c9tpqnLiTRnMSNOYzyz/q",
	"O5fGauUa7SLPl8u9jNrzhmtdiMSzij7YxgS6SieZYOP+XqdD1h3fPYhGbhteFfRsOBrjmShfSbzXmBCm",
	"DLs1WtkJGTQXHicDiVtmq/WiA5+JTygZ5U4GbozuU3NgdxMdqePoBnWaQKYyO600h7KT4wCY+Ffk4w+O",
	"n1T68GwTe+R2OTHCG9xOdWJErx7p/Oz71nkdjD0wSnJRpAblCWZYCEtOkT6E9TL5o4C3e6IjPmWQ7k51",
	"uS/5pQbJ9qBd4f+DW/qb5mdE5Hr8bcuocSg7Q0VHnjZfRr+1Jb9YRS3mVxF9YyKKdpUkUdRfR0zMJ5+v",
	"sz9d2EsQW3ACKEtKt8iEzA7gOE1jq1rur3vha+0Fo9Qs93Tr+3IP/5KT4r31ef9hyw8vKWb0fvSa4mXM",
	"4rT/AoPuP3bPd63v3/X/+1vzEPbr1XnGFq3rvwMAAP//S9BZ+hoXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
