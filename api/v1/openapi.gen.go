// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTXPbNhP+Kxi875ESZefGWxo5rWacNOM2p9STgcgViYQEEGBp2dXwv3cAUiJBUpGU",
	"2mnc6iZR+/XsPthdUBsay0JJAQINjTZUMc0KQNDuW84LjvYDFzSiX0rQDzSgghVAo+bHgJo4g4JZqQRW",
	"rMyRRrOA4oOyQlwgpKBpVQVUsRT2GXO/nWBrzTH7mEAOCMk+m57MqO0Vyw3s7C+lzIEJWlkHtbTLwisN",
	"DGHONcQo9cMNfCnBuLSwPP91RaMPG/p/DSsa0f+FbTrDxkTY13wDyGgVfF3pLax3erS6rQLafj3as28k",
	"2FClpQKNHByw2AFLXjosK6kLhjSiCUOYIC9sPZrMGNRcpLQKaJPOU1S4K5D/OKD3k1ROmoe7GBdz6nii",
	"QTgHUiGXguU0Ql1CcIqRUiWnYasCquFLybUl1AcbddBJUNfg7U5XLj9BjL3yvAaMs0dgh1+rpFv9o+wN",
	"ILUmDiC45o9C73EAzVeOUJgTidE8ZVqz/eis/SG+A6ftHUu5YJZsvVR0MUV9SHegjVUZoOjHthUciYte",
	"aS310HYsE/CoywW+uKTDZhjQAoxpWuvXw3A2W/mxaK65+DwMJnOp21Orptv+cnP1euDRKQ78WEVZWAYo",
	"fGi6cBVQr1sNYigAWcLqMgzNjXDmzVah2k6EMQCSKT6xiUlBTOAeNZsgS53HJReJFYtaSFUfoDM8lsgO",
	"o7yT5IPajsTdRLoYK7CV+mj4nz3R8cnYja6Zqq3+6MHwQ/qYc/HZHOoyLbxrJ9733FgZbzR95UGtBdzj",
	"oQgcU6tqJPXvXad+gnn95IQcgXPrKMfFStZdQSCLHZbm2C3ESjOUqWYqA01elphJbey80jmNaIaoojBM",
	"OWblchrLIuSeQj3TTay5qrlKf9cABROEG8JIwQRLQZOV1GQ3PghqADOlAc15DMJAJ5yXisUZkMvpzAvB",
	"RGG4Xq+nzP08lToNG10TXi9eXb397WpyOZ1NMyxy1+k55tAGQ4O219LZdDa9sEJSgWCK04i+mF44h4ph",
	"5moTdqZBuOFJVZ8cu7vUn7qI5+65hdtCZCIhLM+JXBGOhsQZzxMNwoK2HHDkXSQ75bZvBd4K/aHvazG3",
	"JjuplKQJK6h3WAuhXWHdFtKeq3oLahfZo2dndWvNGCVtxq3m5Wy25VOzazGlch47YOEnU7et1tNR58Xt",
	"DY6vPmi2WkGMkJBOVcg2nJqBTU97pIjqmToSSSngXtWxQCuTAg5ZcQNYauGzYskMJEQKwojhIs2BLOZD",
	"SvwM+Hf4oJ3jJ+bDnn2ojTX0bk9HyLtZc4RcfW38PoSsV/ERHrQJ/4FoqFhzcfCF63FmCGZAUn4HokMX",
	"25ftc6XlHU8gIYv5gI69cXgcI61Rj5X19ed7dCk3c3+SycOj1WHPQjBSmNcc8sS0eHcJTjrp85FWAyJf",
	"/OeJLM1IQ61fo9iGKmBNTLmctMHXvLaJbulXvwbwMu8Tu/de5nhi9y3betdXfdvYvcC4eJ6U3/POaqSE",
	"b2E9lokzzw/xvAqGa2a4XRStpwNrRc4NWkY6FW81sk2HDXr92KphN65XW5ffumrstlvr+Lx3POEi/EPu",
	"v6M8rlukOYHGvaZ6Oo/fNS6/mcZNzGcWn1nsszjclAJ5Xj0Nm4kzfjrR31u1Z8L2g0EZlKqJjIt0FxzD",
	"8djKBvv5MP5rD6OW8qT5YeW75236hxg9PTfO7uDYPG8K7P4NO4ELg//Dngc3jrseemzYd/WzVJj3Lub/",
	"7EXKD/t8mzqhZVTVXwEAAP//DEVIZ4wiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
