// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwW7jNhD9FYLtUba82ZtuaZwtDOymRdo9pUFBS2OJC4lkyFGcwNC/F6RkS5Tk2t4m",
	"aYLNLWI4M+/NPA6H3tBYFkoKEGhotKGKaVYAgnZfa47Z3wnkgJDYby5oRO9K0I80oIIVQCN/T0BNnEHB",
	"7OYEVqzMkUYrlhsIKD4qu38pZQ5M0KqqtrtdrAsNDGHONcQo9eM13JVg0P6H5flvKxrdbOjPGlY0oj+F",
	"LeiwcRH2Lb8AMloF/250BeudHa1uq4C2n0dH9p0EG6q0VKCRgyMWO2LJueOykrpgSCOaMIQJ8gLoLjMG",
	"NRcprQLapPMUE+4K5C8H9GGSykmzuMO4mFsDxTQIF0Aq5FKwnEaoSwhOcVKq5DRuVUA13JVcW0HdWNRB",
	"J0Fdh7c7W7n8BjH2yvMJMM6eQB1+rZJu9Y/yN6DUujjA4DN/EnmPE2g+OUJhThRGs8q0ZvvZWf8H+HWB",
	"Rn2c96ANl2IIrR9wu3EYLKCXWks99B3LBDw9coEfz1otcoGQgrYeCjCGpXAYhvPZ7h9D47WBAagCkCWs",
	"ToVvuqcYX7YG1bbVjlVRMsUnFlwKYgIPqNkEWeoiLrlI7LaoJVL1aTnHY2S+unP4DN342bNSVSOytItc",
	"rGQtD4EsdlyaK2whVpqhTDVTGWhyXmImtbHdSOc0ohmiisIw5ZiVy2ksi5B7BnXHNrHmrpHSiP6pAQom",
	"CDeEkYIJloImK6nJrjkQ1ABmSgOa8xiEgQ6cc8XiDMjZdOZBMFEYrtfrKXP/nkqdho2tCT8vLi6v/ric",
	"nE1n0wyL3J1jjjm0YGjQHjo6m86mH+wmqUAwxWlEP04/uICKYeZqE3bOerjhSVVf6vZmqv/qMp67dUu3",
	"pchEQlieE7kiHA2JM54nGoQlbTXArOki2Rm3hyfwxpCbfqzF3LrspFKSBlZQTyiWQjuguDumFX19x7Vj",
	"ytGdsbq1boySNuPW8mw22+qpuUmZUjmPHbHwm6nbWxvpqPPibgWnV580W60gRkhIpypkC6dWYDNuPRGi",
	"urmOICkFPKgaC7R7UsChKq4BSy18VSyZgYRIQRgxXKQ5kMV8KIlfAf+LHrQL/Mx62DNbtlhDbzZ+Gf3U",
	"c9FI2dr8vCLVKNZMcf7m+vYxBDMgKb8H0amubaN2XWl5zxNIyGI+UE/v9jpOQNapJ6J6Fn2JpuKuyF9k",
	"8vhkddhzf48U5hOHPDEt312Ck076fKbVQMgffnghSzPS/+o3re1/AtbElMtJC77WtU10K7/6TeZl3hd2",
	"75F8vLD7nm2963eX7cMeMC7epuT3/IAwUsIrWI9l4l3nh3ReBcOpMNzOdTbSgSkg5watIp2JN8nYpsMG",
	"vX5sMrAD0sU25PdOBrth1Ab+EceEfWPmq5wuR2VXdzRzgup6PfB02f3ehPxu1TWY30X3xkUXbkqBPK+e",
	"R3zEOT9dl1+t2RsR50FQBqVqkHGR7sAxHMdWNtzfz85rOTtaypO6s93fPR7Tv8So2K+d34HKX7Riu5/V",
	"Tyjd4If1t1HK4542XvH2PVts5ea9R+X/+wjwYb+/BE444VX1TwAAAP//7gE5MjseAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
